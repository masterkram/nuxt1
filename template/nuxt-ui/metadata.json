[{"name":"accordion","description":"Display togglable accordion panels.","usage":"Pass an array to the `items` prop of the Accordion component. Each item can have any property from the [Button](/components/button) component such as `label`, `icon`, `color`, `variant`, `size`, etc. but also:\n\n- `slot` - A key to customize the item with a slot.\n- `content` - The content to display in the panel by default.\n- `disabled` - Determines whether the item is disabled or not.\n- `defaultOpen` - Determines whether the item is initially open or closed.\n- `closeOthers` - Determines whether the item click close others or not. **It only works with multiple mode**.\n\n:component-example{component=\"accordion-example-basic\"}"},{"name":"alert","description":"Display an alert element to draw attention.","usage":"Pass a `title` to your Alert.\n\n::component-card\n---\nprops:\n  title: 'Heads up!'\n---\n::"},{"name":"avatar","description":"Display an image that represents a resource or a group of resources.","usage":"::component-card\n---\nprops:\n  src: 'https://avatars.githubusercontent.com/u/739984?v=4'\n  alt: 'Avatar'\n---\n::"},{"name":"badge","description":"Display a short text to represent a status or a category.","usage":"Use the default slot to set the text of the Badge.\n\n::component-card\n---\ncode: Badge\n---\n\nBadge\n::\n\nYou can also use the `label` prop:\n\n::component-card\n---\nprops:\n  label: Badge\n---\n::"},{"name":"breadcrumb","description":"A list of links that indicate the current page's location within a navigational hierarchy.","usage":"Pass an array to the `links` prop of the Breadcrumb component. Each link can have the following properties:\n\n- `label` - The label of the link.\n- `labelClass` - The class of the link label.\n- `icon` - The icon of the link.\n- `iconClass` - The class of the link icon.\n\nYou can also pass any property from the [NuxtLink](https://nuxt.com/docs/api/components/nuxt-link#props) component such as `to`, `exact`, etc.\n\n:component-example{component=\"breadcrumb-example-basic\"}\n\n::callout{icon=\"i-heroicons-light-bulb\"}\nA `span` will be rendered instead of a link when the `to` property is not defined.\n::"},{"name":"button","description":"Create a button with icon or link capabilities.","usage":"Use the default slot to set the text of the Button.\n\n::component-card\n---\ncode: Button\n---\n\nButton\n::\n\nYou can also use the `label` prop.\n\n::component-card\n---\nprops:\n  label: Button\n---\n::"},{"name":"card","description":"Display a card for content with a header, body and footer.","usage":"::component-example\n---\ncomponent: 'card-example'\ncomponentProps:\n  class: 'w-full'\n---\n::"},{"name":"carousel","description":"Display images or content in a scrollable area.","usage":"Drag with your mouse, scroll with your mouse wheel or use the navigation arrows to navigate.\n\nPass an array to the `items` prop and use the default slot to display the content of each item.\n\n:component-example{component=\"carousel-example\"}"},{"name":"checkbox","description":"Display a checkbox field.","usage":"Use a `v-model` to make the Checkbox reactive.\n\n:component-example{component=\"checkbox-example\"}"},{"name":"chip","description":"Display a chip indicator on any component.","usage":"Wrap any component with the `Chip` component to display a chip indicator.\n\n::component-card\n---\ncode: >-\n\n  <UButton icon=\"i-heroicons-inbox\" color=\"gray\" />\n---\n\n#default\n:u-button{icon=\"i-heroicons-inbox\" color=\"gray\"}\n::"},{"name":"command-palette","description":"Add a customizable command palette to your app.","usage":"Use a `v-model` to display a searchable and selectable list of commands.\n\n::component-example\n---\npadding: false\ncomponent: 'command-palette-example-basic'\ncomponentProps:\n  class: 'h-[257px]'\n---\n::\n\nYou can put a `CommandPalette` anywhere you want but it's most commonly used inside of a modal.\n\n:component-example{component=\"command-palette-example-modal\"}\n\nYou can pass multiple groups of commands to the component. Each group will be separated by a divider and will display a label.\n\nWithout a `v-model`, you can also listen on `@update:model-value` to navigate to a link or do something else when a command is clicked.\n\n::component-example\n---\npadding: false\ncomponent: 'command-palette-example-groups'\ncomponentProps:\n  class: 'h-[274px]'\n---\n::"},{"name":"container","description":"A container lets you center and constrain the width of your content.","usage":"::component-example\n---\ncomponent: 'container-example'\ncomponentProps:\n  class: 'w-full'\n---\n::"},{"name":"context-menu","description":"Display a menu that appears on right click.","usage":":component-example{component=\"context-menu-example\"}"},{"name":"date-picker","description":"An example of a date picker component built with v-calendar.","usage":"You can create a `DatePicker.vue` component based on the `DatePicker` from `v-calendar`.\n\nThe following example is styled based on the `primary` and `gray` colors and supports the `dark` mode. It also supports a `v-model` or `v-model.range` depending on the type of date you want to use.\n\nvue [components/DatePicker.vue]\n<script setup lang=\"ts\">\nimport { DatePicker as VCalendarDatePicker } from 'v-calendar'\n// @ts-ignore\nimport type { DatePickerDate, DatePickerRangeObject } from 'v-calendar/dist/types/src/use/datePicker'\nimport 'v-calendar/dist/style.css'\n\ndefineOptions({\n  inheritAttrs: false\n})\n\nconst props = defineProps({\n  modelValue: {\n    type: [Date, Object] as PropType<DatePickerDate | DatePickerRangeObject | null>,\n    default: null\n  }\n})\n\nconst emit = defineEmits(['update:model-value', 'close'])\n\nconst date = computed({\n  get: () => props.modelValue,\n  set: (value) => {\n    emit('update:model-value', value)\n    emit('close')\n  }\n})\n\nconst attrs = {\n  'transparent': true,\n  'borderless': true,\n  'color': 'primary',\n  'is-dark': { selector: 'html', darkClass: 'dark' },\n  'first-day-of-week': 2\n}\n\nfunction onDayClick(_: any, event: MouseEvent): void {\n  const target = event.target as HTMLElement\n  target.blur()\n}\n</script>\n\n<template>\n  <VCalendarDatePicker\n    v-if=\"date && (date as DatePickerRangeObject)?.start && (date as DatePickerRangeObject)?.end\"\n    v-model.range=\"date\"\n    :columns=\"2\"\n    v-bind=\"{ ...attrs, ...$attrs }\"\n    @dayclick=\"onDayClick\"\n  />\n  <VCalendarDatePicker\n    v-else\n    v-model=\"date\"\n    v-bind=\"{ ...attrs, ...$attrs }\"\n    @dayclick=\"onDayClick\"\n  />\n</template>\n\n<style>\n:root {\n  --vc-gray-50: rgb(var(--color-gray-50));\n  --vc-gray-100: rgb(var(--color-gray-100));\n  --vc-gray-200: rgb(var(--color-gray-200));\n  --vc-gray-300: rgb(var(--color-gray-300));\n  --vc-gray-400: rgb(var(--color-gray-400));\n  --vc-gray-500: rgb(var(--color-gray-500));\n  --vc-gray-600: rgb(var(--color-gray-600));\n  --vc-gray-700: rgb(var(--color-gray-700));\n  --vc-gray-800: rgb(var(--color-gray-800));\n  --vc-gray-900: rgb(var(--color-gray-900));\n}\n\n.vc-primary {\n  --vc-accent-50: rgb(var(--color-primary-50));\n  --vc-accent-100: rgb(var(--color-primary-100));\n  --vc-accent-200: rgb(var(--color-primary-200));\n  --vc-accent-300: rgb(var(--color-primary-300));\n  --vc-accent-400: rgb(var(--color-primary-400));\n  --vc-accent-500: rgb(var(--color-primary-500));\n  --vc-accent-600: rgb(var(--color-primary-600));\n  --vc-accent-700: rgb(var(--color-primary-700));\n  --vc-accent-800: rgb(var(--color-primary-800));\n  --vc-accent-900: rgb(var(--color-primary-900));\n}\n</style>\n```"},{"name":"divider","description":"Display a separator between content.","usage":"You can pass `label`, `icon` or `avatar` to the divider component."},{"name":"dropdown","description":"Display a list of actions in a dropdown menu.","usage":"Pass an array of arrays to the `items` prop of the Dropdown component. Each array represents a group of items. Each item can have the following properties:\n\n- `label` - The label of the item.\n- `labelClass` - The class of the item label.\n- `icon` - The icon of the item.\n- `iconClass` - The class of the item icon.\n- `avatar` - The avatar of the item. You can pass all the props of the [Avatar](/components/avatar) component.\n- `shortcuts` - The shortcuts of the item.\n- `slot` - The slot of the item.\n- `disabled` - Whether the item is disabled.\n- `class` - The class of the item.\n- `click` - The click handler of the item.\n\nYou can also pass any property from the [NuxtLink](https://nuxt.com/docs/api/components/nuxt-link#props) component such as `to`, `exact`, etc.\n\n:component-example{component=\"dropdown-example-basic\"}"},{"name":"form-group","description":"Display a label and additional informations around a form element.","usage":"Use the FormGroup component around an [Input](/components/input), [Textarea](/components/textarea), [Select](/components/select) or a [SelectMenu](/components/select-menu) with a `label`. The `<label>` will automatically be associated with the form element so it gets focused on click.\n\n::component-card\n---\nprops:\n  label: 'Email'\ncode: >-\n\n  <UInput placeholder=\"you@example.com\" icon=\"i-heroicons-envelope\" />\n---\n\n#default\n:u-input{placeholder=\"you@example.com\" icon=\"i-heroicons-envelope\"}\n::"},{"name":"form","description":"Collect and validate form data.","usage":"Use the Form component to validate form data using schema libraries such as [Yup](https://github.com/jquense/yup), [Zod](https://github.com/colinhacks/zod), [Joi](https://github.com/hapijs/joi), [Valibot](https://github.com/fabian-hiller/valibot), [Superstruct](https://github.com/ianstormtaylor/superstruct), or your own validation logic.\n\nIt works with the [FormGroup](/components/form-group) component to display error messages around form elements automatically.\n\nThe form component requires two props:\n- `state` - a reactive object holding the form's state.\n- `schema` - a schema object from a validation library like [Yup](https://github.com/jquense/yup), [Zod](https://github.com/colinhacks/zod), [Joi](https://github.com/hapijs/joi), [Valibot](https://github.com/fabian-hiller/valibot) or [Superstruct](https://github.com/ianstormtaylor/superstruct).\n\n::callout{icon=\"i-heroicons-light-bulb\"}\nNote that **no validation library is included** by default, so ensure you **install the one you need**.\n::\n\n::tabs\n  ::component-example{label=\"Yup\"}\n  ---\n  component: 'form-example-yup'\n  componentProps:\n    class: 'w-60'\n  ---\n  ::\n\n  ::component-example{label=\"Zod\"}\n  ---\n  component: 'form-example-zod'\n  componentProps:\n    class: 'w-60'\n  ---\n  ::\n\n  ::component-example{label=\"Joi\"}\n  ---\n  component: 'form-example-joi'\n  componentProps:\n    class: 'w-60'\n  ---\n  ::\n\n  ::component-example{label=\"Valibot\"}\n  ---\n  component: 'form-example-valibot'\n  componentProps:\n    class: 'w-60'\n  ---\n  ::\n  ::component-example{label=\"Superstruct\"}\n  ---\n  component: 'form-example-superstruct'\n  componentProps:\n    class: 'w-60'\n  ---\n  ::\n::"},{"name":"horizontal-navigation","description":"Display a list of horizontal links.","usage":"Pass an array to the `links` prop of the HorizontalNavigation component. Each link can have the following properties:\n\n- `label` - The label of the link.\n- `labelClass` - The class of the link label.\n- `icon` - The icon of the link.\n- `iconClass` - The class of the link icon.\n- `avatar` - The avatar of the link. You can pass all the props of the [Avatar](/components/avatar) component.\n- `badge` - A badge to display next to the label. You can pass all the props of the [Badge](/components/badge) component.\n- `click` - The click handler of the link.\n\nYou can also pass any property from the [NuxtLink](https://nuxt.com/docs/api/components/nuxt-link#props) component such as `to`, `exact`, etc.\n\n:component-example{component=\"horizontal-navigation-example\"}"},{"name":"icon","description":"Add 200,000+ ready to use icons to your Nuxt application, based on Iconify.","usage":"You can use any name from the https://icones.js.org collection such as the `i-` prefix:\n\n::component-card\n---\nbaseProps:\n  class: 'w-5 h-5'\nprops:\n  name: 'i-heroicons-light-bulb'\n---\n::\n\n::callout{icon=\"i-heroicons-light-bulb\"}\nIt's highly recommended to install the icons collections you need, read more about this in [Theming](/getting-started/theming#icons).\n::"},{"name":"input-menu","description":"Display an autocomplete input with real-time suggestions.","usage":"The `InputMenu` component renders by default an [Input](/components/input) component and is based on the `ui.input` preset. You can use most of the `Input` props to configure the display such as [color](/components/input#style), [variant](/components/input#style), [size](/components/input#size), [placeholder](/components/input#placeholder), [icon](/components/input#icon), [disabled](/components/input#disabled), etc.\n\nYou can use the `ui` prop like the `Input` component to override the default config. The `uiMenu` prop can be used to override the default menu config.\n\nPass an array of strings or objects to the `options` prop to display in the menu.\n\n::component-example\n---\ncomponent: 'input-menu-example-basic'\ncomponentProps:\n  class: 'w-full lg:w-48'\n---\n::\n\n::callout{icon=\"i-heroicons-exclamation-triangle\"}\nThis component does not support multiple values. Use the [SelectMenu](/components/select-menu#multiple) component instead.\n::"},{"name":"input","description":"Display an input field.","usage":"Use a `v-model` to make the Input reactive.\n\n:component-example{component=\"input-example\"}"},{"name":"kbd","description":"Display a keyboard key in a text block.","usage":"Use the default slot to set the text of the Kbd.\n\n::component-card\n---\ncode: K\n---\n\nK\n::\n\nYou can also use the `value` prop:\n\n::component-card\n---\nprops:\n  value: K\n---\n::\n\nAs explained in the [Shortcuts](/getting-started/shortcuts) page, you can use the `metaSymbol` property of the `useShortcuts` composable to display the meta key according to the user's OS.\n\n:component-example{component=\"kbd-example\"}"},{"name":"link","description":"Render a NuxtLink but with superpowers.","usage":"The Link component is a wrapper around [`<NuxtLink>`](https://nuxt.com/docs/api/components/nuxt-link) through the [`custom`](https://router.vuejs.org/api/interfaces/RouterLinkProps.html#Properties-custom) prop that provides a few extra props:\n\n- `inactive-class` prop to set a class when the link is inactive, `active-class` is used when active.\n- `exact` prop to style with `active-class` when the link is active and the route is exactly the same as the current route.\n- `exact-query` and `exact-hash` props to style with `active-class` when the link is active and the query or hash is exactly the same as the current query or hash.\n\nThe incentive behind this is to provide the same API as NuxtLink back in Nuxt 2 / Vue 2. You can read more about it in the Vue Router [migration from Vue 2](https://router.vuejs.org/guide/migration/#removal-of-the-exact-prop-in-router-link) guide.\n\n::component-card\n---\nprops:\n  to: /components/link\n  activeClass: 'text-primary'\n  inactiveClass: 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200'\ncode: ' Link '\n---\n\nLink\n::\n\nIt also renders an `<a>` tag when a `to` prop is provided, otherwise it defaults to rendering a `<button>` tag. The default behavior can be customized using the `as` prop.\n\nIt is used underneath by the [Button](/components/button), [Dropdown](/components/dropdown) and [VerticalNavigation](/components/vertical-navigation) components."},{"name":"meter","description":"Display a gauge meter that fills or depletes.","usage":"Use the `value` prop from `0` to `100` to set a value for the meter bar.\n\n::component-card\n---\nprops:\n  value: 25\n---\n::\n\n::callout{icon=\"i-heroicons-light-bulb\"}\nCheck out the [Range](/components/range) component for inputs\n::"},{"name":"modal","description":"Display a modal within your application.","usage":"Use a `v-model` to control the Modal state.\n\n:component-example{component=\"modal-example-basic\"}\n\nYou can put a [Card](/components/card) component inside your Modal to handle forms and take advantage of `header` and `footer` slots:\n\n:component-example{component=\"modal-example-card\"}"},{"name":"notification","description":"Display a toast notification in your app.","usage":"First of all, add the `Notifications` component to your app, preferably inside `app.vue`.\n\nvue [app.vue]\n<template>\n  <div>\n    <UContainer>\n      <NuxtPage />\n    </UContainer>\n\n    <UNotifications />\n  </div>\n</template>\n```\n\nThis component will render the notifications at the bottom right of the screen by default. You can configure its behavior in the `app.config.ts` through `ui.notifications`:\n\n```ts [app.config.ts]\nexport default defineAppConfig({\n  ui: {\n    notifications: {\n      // Show toasts at the top right of the screen\n      position: 'top-0 bottom-[unset]'\n    }\n  }\n})\n```\n\n::callout{icon=\"i-heroicons-light-bulb\"}\nThe `position` defaults to `bottom-0 end-0`, the `bottom-[unset]` class overrides `bottom-0` so the result is `top-0 end-0`.\n::\n\nThen, you can use the `useToast` composable to add notifications to your app:\n\n:component-example{component=\"notification-example-basic\"}\n\nWhen using `toast.add`, this will push a new notification to the stack displayed in `<UNotifications />`. All the props of the `Notification` component can be passed to `toast.add`.\n\n<script setup lang=\"ts\">\nconst toast = useToast()\n\nonMounted(() => {\n  toast.add({\n    id: 'update_downloaded',\n    title: 'Update downloaded.',\n    description: 'It will be installed on restart. Restart now?',\n    icon: 'i-octicon-desktop-download-24',\n    timeout: 0,\n    actions: [{\n      label: 'Restart',\n      click: () => {\n\n      }\n    }]\n  })\n})\n</script>\n```\n\nYou can also use the `Notification` component directly in your app as an alert for example."},{"name":"pagination","description":"Add a pagination to handle pages.","usage":"Use a `v-model` to get a reactive page alongside a `total` which represents the total of items. You can also use the `page-count` prop to define the number of items per page which defaults to `10`.\n\n:component-example{component=\"pagination-example-basic\"}"},{"name":"popover","description":"Display a non-modal dialog that floats around a trigger element.","usage":":component-example{component=\"popover-example\"}"},{"name":"progress","description":"Show a horizontal bar to indicate task progression.","usage":"Pass an integer as the `value` from `0` to `100` to the Progress bar component.\n\n::component-card\n---\nprops:\n  value: 70\n---\n::\n\n::callout{icon=\"i-heroicons-light-bulb\"}\nCheck out the [Range](/components/range) component for forms.\n::"},{"name":"radio-group","description":"Display a set of radio buttons.","usage":"Use a `v-model` to make the RadioGroup reactive.\n\n:component-example{component=\"radio-group-example\"}\n\nAlternatively, you can use individual Radio components:\n\n:component-example{component=\"radio-example\"}\n\n::callout{icon=\"i-heroicons-light-bulb\"}\nIf using the RadioGroup component, you can customize the Radio options by using the `uiRadio` prop.\n::"},{"name":"range","description":"Display a range field","usage":"Use a `v-model` to make the Range reactive.\n\n:component-example{component=\"range-example\"}"},{"name":"select-menu","description":"Display a select menu with advanced features.","usage":"The `SelectMenu` component renders by default a [Select](/components/select) component and is based on the `ui.select` preset. You can use most of the `Select` props to configure the display if you don't want to override the default slot such as [color](/components/select#style), [variant](/components/select#style), [size](/components/select#size), [placeholder](/components/select#placeholder), [icon](/components/select#icon), [disabled](/components/select#disabled), etc.\n\nYou can use the `ui` prop like the `Select` component to override the default config. The `uiMenu` prop can be used to override the default menu config.\n\nLike the `Select` component, you can use the `options` prop to pass an array of strings or objects.\n\n::component-example\n---\ncomponent: 'select-menu-example-basic'\ncomponentProps:\n  class: 'w-full lg:w-48'\n---\n::"},{"name":"select","description":"Display a select field.","usage":"The Select component is a wrapper around the native `<select>` HTML element. For more advanced use cases like searching or multiple selection, consider using the [SelectMenu](/components/select-menu) component.\n\nUse a `v-model` to make the Select reactive alongside the `options` prop to pass an array of strings or objects.\n\n:component-example{component=\"select-example\"}\n\nWhen using objects, you can configure which field will be used for display through the `option-attribute` prop that defaults to `label` and which field will be used for comparison through the `value-attribute` prop that defaults to `value`.\n\nAdding a `disabled` key to the objects will control the disabled state of the option.\n\n:component-example{component=\"select-example-objects\"}"},{"name":"skeleton","description":"Display a placeholder while content is loading.","usage":"Use to show a placeholder while content is loading.\n\n:component-example{component=\"skeleton-example\"}"},{"name":"slideover","description":"Display a dialog that slides in from the edge of the screen.","usage":"Use a `v-model` to control the Slideover state.\n\n:component-example{component=\"slideover-example-basic\"}\n\nYou can put a [Card](/components/card) component inside your Slideover to handle forms and take advantage of `header` and `footer` slots:\n\n:component-example{component=\"slideover-example-card\"}"},{"name":"table","description":"Display data in a table.","usage":"Use the `rows` prop to set the data to display in the table. By default, the table will display all the fields of the rows.\n\n::component-example{class=\"grid\"}\n---\nextraClass: 'overflow-hidden'\npadding: false\ncomponent: 'table-example-basic'\ncomponentProps:\n  class: 'flex-1'\n---\n::"},{"name":"tabs","description":"A set of tab panels that are displayed one at a time.","usage":"Pass an array to the `items` prop of the Tabs component. Each item can have the following properties:\n\n- `label` - The label of the item.\n- `icon` - The icon of the item.\n- `slot` - A key to customize the item with a slot.\n- `content` - The content to display in the panel by default.\n- `disabled` - Determines whether the item is disabled or not.\n\n::component-example\n---\ncomponent: 'tabs-example-basic'\ncomponentProps:\n  class: 'w-full'\n---\n::"},{"name":"textarea","description":"Display a textarea field.","usage":"Use a `v-model` to make the Textarea reactive.\n\n:component-example{component=\"textarea-example\"}"},{"name":"toggle","description":"Display a toggle field.","usage":"Use a `v-model` to make the Toggle reactive.\n\n:component-example{component=\"toggle-example\"}"},{"name":"tooltip","description":"Display content that appears on hover next to an element.","usage":":component-example{component=\"tooltip-example\"}"},{"name":"vertical-navigation","description":"Display a list of vertical links.","usage":"Pass an array to the `links` prop of the VerticalNavigation component. Each link can have the following properties:\n\n- `label` - The label of the link.\n- `labelClass` - The class of the link label.\n- `icon` - The icon of the link.\n- `iconClass` - The class of the link icon.\n- `avatar` - The avatar of the link. You can pass all the props of the [Avatar](/components/avatar) component.\n- `badge` - A badge to display next to the label. You can pass all the props of the [Badge](/components/badge) component.\n- `click` - The click handler of the link.\n\nYou can also pass any property from the [NuxtLink](https://nuxt.com/docs/api/components/nuxt-link#props) component such as `to`, `exact`, etc.\n\n:component-example{component=\"vertical-navigation-example\"}"}]